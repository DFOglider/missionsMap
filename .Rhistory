shiny::runApp('Gliders/Rdata/pilotingApp')
install.packages("mapview")
runApp('Gliders/Rdata/pilotingApp')
install.packages("mapview")
shiny::runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
install.packages('mapview')
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
source('~/Gliders/Rdata/fig_voltage.R')
locator(1)
windows()
plot(timee,volt)
grid (NULL,NULL)
plot(timee,volt)
plot.oce.ts(timee,volt)
library(oce)
oce.plot.ts(timee,volt)
windows()
oc
windows()
oce.plot.ts(timee,volt,grid=TRUE)
oce.plot.ts(timee,volt,grid=TRUE,type='p')
abline(h=25.7)
windows()
oce.plot.ts(timee,volt,grid=TRUE,type='p')
abline(h=25.7,col='red')
36
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
shiny::runApp('Gliders/Rdata/pilotingApp')
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
rm(list=ls())
graphics.off()
library(oce)
library(geosphere)
#setwd('/Users/BelzileM/Documents/Gliders/Rdata') # CL: not needed
#load functions to convert oxygen frequency to saturation
#source('swSatO2.R')
#source('sbeO2Hz2Sat.R')
# REAL TIME
##### LOAD NAV DATA #####
#dataDir <- '/Users/BelzileM/Documents/Gliders/Socib/Data/SEA019/M29/all_data/'
dataDir <- 'R:/Shared/Gliders/SEA019/Data/M43/Navigation/logs/'
#ncname <- 'sea019.29.gli.sub.4'
#ncfname <- paste(dataDir,ncname,'.gz', sep = '')
#data <- read.table(ncfname, sep=";")
files_tmp <- dir(path='R:/Shared/Gliders/SEA019/Data/M43/Navigation/logs/',pattern='*.gli.sub.*.gz')
files <- paste(dataDir,as.list(files_tmp),sep = '')
# to put the files in the right order
strl<-nchar(files)
cate<-length(unique(strl))
if(cate==1){
data_all <- lapply(as.list(files), read.table, sep=";",header=TRUE)
} else if (cate==2){
first<-which(strl == min(strl), arr.ind = TRUE)
seco<-which(strl == min(strl)+1, arr.ind = TRUE)
data_all1 <- lapply(as.list(files[first]), read.table, sep=";",header=TRUE)
data_all2 <- lapply(as.list(files[seco]), read.table, sep=";",header=TRUE)
data_all <- c(data_all1,data_all2)
} else {
first<-which(strl == min(strl), arr.ind = TRUE)
seco<-which(strl == min(strl)+1, arr.ind = TRUE)
third<-which(strl == min(strl)+2, arr.ind = TRUE)
data_all1 <- lapply(as.list(files[first]), read.table, sep=";",header=TRUE)
data_all2 <- lapply(as.list(files[seco]), read.table, sep=";",header=TRUE)
data_all3 <- lapply(as.list(files[third]), read.table, sep=";",header=TRUE)
data_all <- c(data_all1,data_all2,data_all3)
}
#Yo num
profileNum <- unlist(lapply(files, function(x) {
tmp <- unlist(strsplit(x, '.', fixed=TRUE))[5]
len <- dim(read.table(x, sep=';', header=TRUE))[1]
rep(tmp, len)
}))
profileNum <- sort(as.numeric(profileNum))
# to read the time in the right format
time_tmp <- unlist(lapply(data_all, function(k) k$Timestamp))
time <- as.POSIXct(time_tmp,format='%d/%m/%Y %H:%M:%S',tz='UTC')
time[time < as.POSIXct('2010-01-01')] <- NA
# to calculate the vertical speed
times<-as.integer(time) # in seconds since 1970
depth<-unlist(lapply(data_all, function(k) k$Depth))
VS=c()
for (i in c(1:length(depth)-1)){
VS[i]<-((depth[i+1]-depth[i])/(times[i+1]-times[i]))*-100
}
VS[length(depth)]<-NA
#to add the altimeter hit on the depth graph
alt<-unlist(lapply(data_all, function(k) k$Altitude))
alt[alt<0]<-0
altHit<-depth+alt
glider <- data.frame(
profileNumber=profileNum,
time=time,
VertSpeed=VS,
altHit=altHit,
NavState=unlist(lapply(data_all, function(k) k$NavState)),
alarm=unlist(lapply(data_all, function(k) k$SecurityLevel)),
Heading=unlist(lapply(data_all, function(k) k$Heading)),
Pitch=unlist(lapply(data_all, function(k) k$Pitch)),
Roll=unlist(lapply(data_all, function(k) k$Roll)),
Temperature=unlist(lapply(data_all, function(k) k$Temperature)),
int_pres=unlist(lapply(data_all, function(k) k$Pa)),
DesiredHeading=unlist(lapply(data_all, function(k) k$DesiredH)),
depth=unlist(lapply(data_all, function(k) k$Depth)),
BallastCmd=unlist(lapply(data_all, function(k) k$BallastCmd)),
BallastPos=unlist(lapply(data_all, function(k) k$BallastPos)),
LinCmd=unlist(lapply(data_all, function(k) k$LinCmd)),
LinPos=unlist(lapply(data_all, function(k) k$LinPos)),
AngCmd=unlist(lapply(data_all, function(k) k$AngCmd)),
AngPos=unlist(lapply(data_all, function(k) k$AngPos)),
BatterieVolt=unlist(lapply(data_all, function(k) k$Voltage)),
alt=unlist(lapply(data_all, function(k) k$Altitude))
)
dataDirsci <- 'R:/Shared/Gliders/SEA019/Data/M43/Payload/logs/logs/'
filesci_tmp <- dir(path='R:/Shared/Gliders/SEA019/Data/M43/Payload/logs/logs/',pattern='*.pld1.sub.*.gz')
filesci <- paste(dataDirsci,as.list(filesci_tmp),sep = '')
# to put the files in the right order
strlsci<-nchar(filesci)
catesci<-length(unique(strlsci))
if(catesci==1){
data_allsci <- lapply(as.list(filesci), read.table, sep=";",header=TRUE)
} else if (cate==2){
firstsci<-which(strlsci == min(strlsci), arr.ind = TRUE)
secosci<-which(strlsci == min(strlsci)+1, arr.ind = TRUE)
data_all1sci <- lapply(as.list(filesci[firstsci]), read.table, sep=";",header=TRUE)
data_all2sci <- lapply(as.list(filesci[secosci]), read.table, sep=";",header=TRUE)
data_allsci <- c(data_all1sci,data_all2sci)
} else {
firstsci<-which(strlsci == min(strlsci), arr.ind = TRUE)
secosci<-which(strlsci == min(strlsci)+1, arr.ind = TRUE)
thirdsci<-which(strlsci == min(strlsci)+2, arr.ind = TRUE)
data_all1sci <- lapply(as.list(filesci[firstsci]), read.table, sep=";",header=TRUE)
data_all2sci <- lapply(as.list(filesci[secosci]), read.table, sep=";",header=TRUE)
data_all3sci <- lapply(as.list(filesci[thirdsci]), read.table, sep=";",header=TRUE)
data_allsci <- c(data_all1sci,data_all2sci,data_all3sci)
}
# to read the time in the right format
time_tmpsci <- unlist(lapply(data_allsci, function(k) k$PLD_REALTIMECLOCK))
timesci <- as.POSIXct(time_tmpsci,format='%d/%m/%Y %H:%M:%S',tz='UTC')
timesci[timesci < as.POSIXct('2010-01-01')] <- NA
dataDirsci <- 'R:/Shared/Gliders/SEA019/Data/M43/Payload/logs/'
filesci_tmp <- dir(path='R:/Shared/Gliders/SEA019/Data/M43/Payload/logs/',pattern='*.pld1.sub.*.gz')
filesci <- paste(dataDirsci,as.list(filesci_tmp),sep = '')
# to put the files in the right order
strlsci<-nchar(filesci)
catesci<-length(unique(strlsci))
if(catesci==1){
data_allsci <- lapply(as.list(filesci), read.table, sep=";",header=TRUE)
} else if (cate==2){
firstsci<-which(strlsci == min(strlsci), arr.ind = TRUE)
secosci<-which(strlsci == min(strlsci)+1, arr.ind = TRUE)
data_all1sci <- lapply(as.list(filesci[firstsci]), read.table, sep=";",header=TRUE)
data_all2sci <- lapply(as.list(filesci[secosci]), read.table, sep=";",header=TRUE)
data_allsci <- c(data_all1sci,data_all2sci)
} else {
firstsci<-which(strlsci == min(strlsci), arr.ind = TRUE)
secosci<-which(strlsci == min(strlsci)+1, arr.ind = TRUE)
thirdsci<-which(strlsci == min(strlsci)+2, arr.ind = TRUE)
data_all1sci <- lapply(as.list(filesci[firstsci]), read.table, sep=";",header=TRUE)
data_all2sci <- lapply(as.list(filesci[secosci]), read.table, sep=";",header=TRUE)
data_all3sci <- lapply(as.list(filesci[thirdsci]), read.table, sep=";",header=TRUE)
data_allsci <- c(data_all1sci,data_all2sci,data_all3sci)
}
time_tmpsci <- unlist(lapply(data_allsci, function(k) k$PLD_REALTIMECLOCK))
timesci <- as.POSIXct(time_tmpsci,format='%d/%m/%Y %H:%M:%S',tz='UTC')
timesci[timesci < as.POSIXct('2010-01-01')] <- NA
#calculate distance traveled and glider speed
# convert lat long to decimal
conv <- function(x) {
res <- rep(NA, length(x))
zeros <- x == "0"
nas <- is.na(x)
good <- !(zeros | nas)
res[good] <- ifelse(substr(x[good], 1, 1) == "-", -1, 1)*
((abs(as.numeric(x[good])/100) - floor(abs(as.numeric(x[good])/100)))*100/60
+ floor(abs(as.numeric(x[good])/100)))
res[zeros] <- 0
return(res)
}
LonT <- unlist(lapply(data_allsci, function(k) k$NAV_LONGITUDE))
Lond <- conv(LonT)
LatT <- unlist(lapply(data_allsci, function(k) k$NAV_LATITUDE))
Latd <- conv(LatT)
# Identify each surfacing (Navstate=115) time and position for calculation
index115 <- which(glider$NavState %in% 115)
NavTime115t <- glider$time[index115]
NavTime115 <- NavTime115t[!is.na(NavTime115t)]
index115sci <- rep(NA, length(NavTime115))
for (j in c(1:length(NavTime115))){
index115sci[j] <- which.min(abs(timesci - NavTime115[j]))
}
PLDTime115 <- timesci[index115sci]
dist <- distGeo(matrix(c(Lond[index115sci], Latd[index115sci]),nrow=length(PLDTime115),ncol=2))
distsum<- rep(NA, length(dist))
speed<- rep(NA, length(dist))
for (j in c(1:length(dist))){
distsum[j] <- sum(dist[1:j])/1000
speed[j] <- dist[j]/as.numeric(PLDTime115[j+1]-PLDTime115[j],units='secs')
}
timedist <- PLDTime115[2:length(PLDTime115)]
speed_goodi <- which(speed!=0)
speed_good <- speed[speed_goodi]
timespeed <- timedist[speed_goodi]
#put speed and dist back on glider$time ref
indexspeed <- rep(NA, length(timespeed))
indexdist <- rep(NA, length(timedist))
for (j in c(1:length(timespeed))){
indexspeed[j] <- which.min(abs(glider$time - timespeed[j]))
}
for (j in c(1:length(timedist))){
indexdist[j] <- which.min(abs(glider$time - timedist[j]))
}
# put 2 new variables in glider data frame
glider$speedms <- rep(NA, length(glider$time))
glider$distkm <-  rep(NA, length(glider$time))
glider$speedms[indexspeed] <- speed_good
glider$distkm[indexdist] <- distsum
# to put everything in a dataframe where all the dive are together
PLD <- data.frame(
timesci=timesci,
Lat=Latd,
Lon=Lond,
Depthsci=unlist(lapply(data_allsci, function(k) k$NAV_DEPTH)),
CHL_count=unlist(lapply(data_allsci, function(k) k$FLBBCD_CHL_COUNT)),
CHL_scaled=unlist(lapply(data_allsci, function(k) k$FLBBCD_CHL_SCALED)),
BB_count=unlist(lapply(data_allsci, function(k) k$FLBBCD_BB_700_COUNT)),
BB_scaled=unlist(lapply(data_allsci, function(k) k$FLBBCD_BB_700_SCALED)),
CDOM_count=unlist(lapply(data_allsci, function(k) k$FLBBCD_CDOM_COUNT)),
CDOM_scaled=unlist(lapply(data_allsci, function(k) k$FLBBCD_CDOM_SCALED)),
Temp=unlist(lapply(data_allsci, function(k) k$GPCTD_TEMPERATURE)),
Press=unlist(lapply(data_allsci, function(k) k$GPCTD_PRESSURE)),
DOF=unlist(lapply(data_allsci, function(k) k$GPCTD_DOF)),
Conduc=unlist(lapply(data_allsci, function(k) k$GPCTD_CONDUCTIVITY))
)
x <- c(PLD$timesci,PLD$Lat,PLD$Lon)
x[1:10]
time_tmpsci[1:10]
time_tmpsci[1:10,1:3]
X <- matrix(x,nrow=length(PLD$timesci),ncol=3)
X[1:10,1:3)]
X[1:10,1:3]
PLD$timesci[1:10]
x[1:10]
write.table(X, file, append = FALSE, sep = " ", dec = ".",
row.names = TRUE, col.names = TRUE)
write.table(X, file='test', append = FALSE, sep = " ", dec = ".",
row.names = TRUE, col.names = TRUE)
getwd()
write.csv(X, file = "test2.csv")
?matrix
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='test3')
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='SEA019M43',append = FALSE, sep = " ", dec = ".",
+             row.names = TRUE, col.names = TRUE)
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='test3',row.names = FALSE, col.names = FALSE)
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='SEA019M43',row.names = FALSE, col.names = FALSE)
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='SEA021M30',row.names = FALSE, col.names = FALSE)
shiny::runApp('Gliders/Rdata/pilotingApp')
filesci_tmp <- dir(path='R:/Shared/Gliders/SEA021/Data/M33/pld/logs/logs/',pattern='*.pld1.sub.*.gz')
getwd()
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
save('data_all', 'glider','data_allsci','PLD', file= "R:/Shared/Gliders/SEA021/Data/M33/currentMission.RData")
write.table(data.frame(PLD$timesci,PLD$Lat,PLD$Lon),file='SEA021M33',row.names = FALSE, col.names = FALSE)
runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
shiny::runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
source('~/Gliders/Rdata/pilotingApp/readSeaExplorerRealTime.R')
rm(list=ls())
library(shiny)
library(oce)
library(ocedata)
library(measurements)
library(leaflet)
library(RCurl)
library(geosphere)
library(XML)
data(ctd) # for initial plotProfile tests, delete later
options(oceEOS='unesco') # prevent error for calculated values using swSigmaTheta, etc
source('addMouseCoordinates.R') # from mapview package, some had issues with mapview
source('readSeaExplorerRealTime.R')
runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
source('~/Gliders/Rdata/fig_voltage.R')
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
source('~/Gliders/Rdata/pilotingApp/while_pilotting.R')
dataDir2 <- 'R:/Shared/Gliders/SEA021/Data/M31/Nav/logs/'
source('~/Gliders/Rdata/fig_voltage.R')
shiny::runApp('Gliders/Rdata/pilotingApp')
shiny::runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
version
shiny::runApp('Gliders/Rdata/pilotingApp')
runApp('Gliders/Rdata/pilotingApp')
shiny::runApp('Gliders/Rdata/pilotingApp')
getwd()
shiny::runApp('Gliders/Rdata/missionsMap')
?addPolylines
runApp('Gliders/Rdata/missionsMap')
runApp('Gliders/Rdata/missionsMap')
shiny::runApp('Gliders/Rdata/missionsMap')
shiny::runApp('Gliders/Rdata/missionsMap')
runApp('Gliders/Rdata/missionsMap')
shiny::runApp('Gliders/Rdata/missionsMap')
